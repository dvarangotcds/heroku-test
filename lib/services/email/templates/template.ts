//import email
import { Email } from '../facades/email'
import { EmailService } from '../email_service'
import { logger } from './../../../services'

//import file system i/o api
import { existsSync, readFileSync } from 'fs'

//import sendgrid
import { SendGridContent, SendGridResponse } from '../send-grid'

/**
 * An email template.
 * The templates are generated by ZURB Foundation for Emails.
 * @class EmailTemplate
 */
export abstract class EmailTemplate {
  //the email dist path
  public static DIST_PATH: string = 'path/to/email/templates'

  //the email
  public email: Email

  //the email service
  public emailService: EmailService

  //the email subject
  abstract subject: string

  //the mime type
  public type: string = 'text/html'

  //the contents of the template
  private _contents: SendGridContent

  //the template file name
  private _fileName: string

  //the html content if no template file is provieded
  private _htmlContent: string

  /**
   * @constructor
   */
  constructor() {
    //create a new instance of the EmailService
    this.emailService = new EmailService()

    //store a reference to the Email
    this.email = this.emailService.email
  }

  /**
   * Returns the SendGridContent object for this template.
   * @method get content
   * @return {SendGridContent}
   */
  public get content(): SendGridContent {
    //return content if it already exists
    if (this._contents !== undefined) {
      return this._contents
    }

    let value: string

    //invoke pre-content hook
    this.pre()

    //build template file path
    if (this.fileName !== '') {
      var path: string = `${EmailTemplate.DIST_PATH}/${this.fileName}`

      //verify template file exists
      if (!existsSync(path)) {
        throw new Error(`[EmailTemplate.content] The file does not exist {path: ${path}}.`)
      }

      //read file
      value = readFileSync(path).toString()
    } else {
      value = this.htmlContent
    }

    //build content
    let content: SendGridContent = {
      type: this.type,
      value: value
    }

    //invoke post-content hook
    this.post()

    return content
  }

  /**
   * Returns the file name in the DIST_PATH directory for this template.
   * @method get fileName
   * @return {string}
   */
  public get fileName(): string {
    return this._fileName
  }

  public get htmlContent(): string {
    return this._htmlContent
  }

  /**
   * Set the file name in the DIST_PATH directory for this template.
   * The contents of this file will be used for the email content.
   * @method set fileName
   * @param {string} fileName
   */
  public set fileName(fileName: string) {
    if (!fileName.match(/\.html$/i)) {
      fileName += '.html'
    }
    this.fileName = fileName
  }

  /**
   * Post-content hook.
   * @method post
   * @abstract
   */
  abstract post()

  /**
   * Pre-content hook.
   * @method pre
   * @abstract
   */
  abstract pre()

  /**
   * Send this email template using the EmailService.
   * @method send
   * @abstract
   */
  public send(): Promise<SendGridResponse> {
    return this.emailService.populateFromTemplate(this).send()
  }
}
